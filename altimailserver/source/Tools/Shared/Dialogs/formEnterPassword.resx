<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAQAAEABAAoAQAANgAAABAQAAABAAgAaAUAAF4BAAAQEAAAAQAgAGgEAADGBgAAKAAAABAA
        AAAgAAAAAQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8SUkAu3IzAMp2GQCfbGIAwH1HANSF
        PgCxhW4A2J5tALOZlwDQr6gA7syxAOfa2gD//wAAwMDAAP///wAAAAAAAAAAAAAApER5AAAAAAqXRERB
        EQAAqqlERERBAACqhjIlREQAAKhpdVIzMwAAiKhVd3REAAC6aFIzMzMAAKjKmZmXdQAAu2gzMzMiAAC4
        vqqZd3UAAL/M7qmZdwAA/8zuqZmXAADMzMzuqpcAAMzMzO6q4AAAAAAAAAAAAP//AADwPwAA4AMAAMAD
        AADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAAwAMAAMADAADAAwAAwAcAAP//AAAoAAAAEAAAACAA
        AAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHxJSQC8bCwAtm45AL51MgC9eTUAzGcBAMpq
        DQDPdgYAzXAIANB0AgDSfAMA0HoJAMJrHwDKchEAy3kSAMt5FgDJcR4AwnYjAMR2IwDFciQAyX4jAMV+
        LADUfioA1H4sAMJ3NQDNfzIAgk9PAIVSUgCKV1cAjVpaAI5cXgCQXV0AsXBGALl1RAC3e0oAunpMAKNs
        WgCrcFAAr3ZTALR5VQC2fVsAkmJiAJViYgCZZWIAmGZmAJ5sZgCaaWkAnG9vAJ5xcgCecnUArX1mALF+
        ZACjcnIAoXl8AKR9fQCrfn4AwH1HANSFPgC3glkAsYBmALaJagCsgHMAq4R8ALWRfgDim1QAypNnANWf
        agDanG4A05VxAM2ifwDkp28A4al8AKWBgQCrhYUAqYmJAKqMjwCwiYoAuJSCALWXjgC/m44ArZKSAK2T
        lwCykpIAtpuTALKZmgC6mZkAtqKiALelpQC6qqoAu62uALytrQC9sbIAypiYAM2umgDmroAA4K+MAOm2
        igDCpaUAxqamAM+jowDKqqoAza2tANCiowDRrq4A1K2tAN2zoADWr7AAwLa2AMqxsQDNsbEAwbi4AMS+
        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
</value>
  </data>
</root>