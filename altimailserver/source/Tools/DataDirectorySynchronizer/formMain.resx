<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAA+Hw+Hfh8Ph/4fD4f+Hw+H/j8fj8=
</value>
  </data>
</root>